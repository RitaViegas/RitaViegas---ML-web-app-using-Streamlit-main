import streamlit as st
import tempfile
import os
from gtts import gTTS
from huggingface_hub import hf_hub_download
import joblib

# Multilingual dictionary for translations
translations = {
    "title": {"en": "üé¨ Movie Recommendation System", "es": "üé¨ Sistema de Recomendaci√≥n de Pel√≠culas", "pt": "üé¨ Sistema de Recomenda√ß√£o de Filmes"},
    "description": {
        "en": "This system suggests movies based on the chosen genre and a pre-trained model.",
        "es": "Este sistema sugiere pel√≠culas seg√∫n el g√©nero elegido y un modelo preentrenado.",
        "pt": "Este sistema sugere filmes com base no g√™nero escolhido e em um modelo pr√©-treinado.",
    },
    "choose_genre": {"en": "Choose a movie genre:", "es": "Elige un g√©nero de pel√≠cula:", "pt": "Escolha um g√™nero de filme:"},
    "play_audio": {"en": "üîä Click to listen to the selected option:", "es": "üîä Haz clic para escuchar la opci√≥n seleccionada:", "pt": "üîä Clique para ouvir a op√ß√£o selecionada:"},
    "get_recommendations": {"en": "Get Recommendations", "es": "Obtener Recomendaciones", "pt": "Obter Recomenda√ß√µes"},
    "loading_model": {"en": "üîç Generating movie recommendations...", "es": "üîç Generando recomendaciones de pel√≠culas...", "pt": "üîç Gerando recomenda√ß√µes de filmes..."},
    "recommendation_success": {"en": "‚ú® Here are your movie recommendations:", "es": "‚ú® Aqu√≠ est√°n tus recomendaciones de pel√≠culas:", "pt": "‚ú® Aqui est√£o suas recomenda√ß√µes de filmes:"},
    "no_recommendations": {"en": "‚ö† No recommendations found for the selected genre.", "es": "‚ö† No se encontraron recomendaciones para el g√©nero seleccionado.", "pt": "‚ö† Nenhuma recomenda√ß√£o encontrada para o g√™nero selecionado."},
    "footer": {"en": "üìΩÔ∏è Movie Recommendation System", "es": "üìΩÔ∏è Sistema de Recomendaci√≥n de Pel√≠culas", "pt": "üìΩÔ∏è Sistema de Recomenda√ß√£o de Filmes"},
    "genres": {
        "en": ["Comedy", "Horror", "Science Fiction", "Action", "Thriller", "Mystery", "Documentary"],
        "es": ["Comedia", "Terror", "Ciencia Ficci√≥n", "Acci√≥n", "Suspense", "Misterio", "Documental"],
        "pt": ["Com√©dia", "Terror", "Fic√ß√£o Cient√≠fica", "A√ß√£o", "Thriller", "Mist√©rio", "Document√°rio"],
    }
}

# Function to play audio
def play_audio(text, lang):
    tts = gTTS(text=text, lang=lang)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_audio:
        tts.save(temp_audio.name)
        st.audio(temp_audio.name, format="audio/mp3")
        st.session_state["temp_audio_file"] = temp_audio.name  # Save the temporary path

# Function to delete temporary audio files
def cleanup_audio():
    temp_audio_file = st.session_state.get("temp_audio_file")
    if temp_audio_file and os.path.exists(temp_audio_file):
        os.remove(temp_audio_file)

# Function to load the model
@st.cache_resource
def load_model(repo_id, filename, repo_type="model"):
    try:
        file_path = hf_hub_download(repo_id=repo_id, filename=filename, repo_type=repo_type)
        model = joblib.load(file_path)
        st.success(f"‚úÖ Model `{filename}` loaded successfully!")
        return model
    except Exception as e:
        st.error(f"‚ùå Error loading `{filename}`. Details: {e}")
        return None

# Centralized mapping of genres to Portuguese (keys in 'movies')
genre_mapping = {
    "en": {
        "Comedy": "Com√©dia", 
        "Horror": "Terror", 
        "Science Fiction": "Fic√ß√£o Cient√≠fica", 
        "Action": "A√ß√£o", 
        "Thriller": "Thriller", 
        "Mystery": "Mist√©rio", 
        "Documentary": "Document√°rio"
    },
    "es": {
        "Comedia": "Com√©dia", 
        "Terror": "Terror", 
        "Ciencia Ficci√≥n": "Fic√ß√£o Cient√≠fica", 
        "Acci√≥n": "A√ß√£o", 
        "Suspense": "Thriller", 
        "Misterio": "Mist√©rio", 
        "Documental": "Document√°rio"
    },
    "pt": {
        "Com√©dia": "Com√©dia", 
        "Terror": "Terror", 
        "Fic√ß√£o Cient√≠fica": "Fic√ß√£o Cient√≠fica", 
        "A√ß√£o": "A√ß√£o", 
        "Thriller": "Thriller", 
        "Mist√©rio": "Mist√©rio", 
        "Document√°rio": "Document√°rio"
    }
}

# Updated function to simulate movie recommendations
def generate_recommendations(genre, vectorizer, similarity, lang_key):
    try:
        st.info(translations["loading_model"][lang_key])
        
        # Simulated movie data (Portuguese keys only)
        movies = {
            "Com√©dia": ["Superbad", "The Hangover", "Jumanji"],
            "Terror": ["The Conjuring", "Insidious", "Get Out"],
            "Fic√ß√£o Cient√≠fica": ["Interstellar", "Inception", "Blade Runner"],
            "A√ß√£o": ["Fast & Furious", "John Wick", "Mad Max"],
            "Thriller": ["Gone Girl", "Prisoners", "The Girl with the Dragon Tattoo"],
            "Mist√©rio": ["Knives Out", "Sherlock Holmes", "The Prestige"],
            "Document√°rio": ["The Social Dilemma", "Planet Earth", "13th"]
        }

        # Map the translated genre to Portuguese
        genre_in_pt = genre_mapping[lang_key].get(genre, "")
        
        # Get recommendations
        recommendations = movies.get(genre_in_pt, [])
        
        if recommendations:
            st.success(translations["recommendation_success"][lang_key])
            for movie in recommendations:
                st.write(f"üìΩÔ∏è {movie}")
        else:
            st.warning(translations["no_recommendations"][lang_key])
    except Exception as e:
        st.error(f"‚ùå An error occurred while generating recommendations: {e}")

# Streamlit Main Interface
# Language selection
language = st.sidebar.selectbox("üåê Choose your language:", ["English", "Espa√±ol", "Portugu√™s"])
lang_code = {"English": "en", "Espa√±ol": "es", "Portugu√™s": "pt"}[language]
current_lang = lang_code

# Load models
repo_id_vectorizer = "RitaViegas/vectorizer.pkl"
repo_id_similarity = "RitaViegas/similarity.pkl"
vectorizer = load_model(repo_id_vectorizer, "vectorizer.pkl")
similarity = load_model(repo_id_similarity, "similarity.pkl")

# Verify models
if vectorizer is None or similarity is None:
    st.stop()

st.title(translations["title"][current_lang])
st.markdown(translations["description"][current_lang])

# Movie genre options
# Movie genre options
genres = translations["genres"][current_lang]  # G√™neros traduzidos
selected_genre = st.selectbox(translations["choose_genre"][current_lang], genres)

# Play audio of the selected genre
st.write(translations["play_audio"][current_lang])
play_audio(f"Voc√™ escolheu o g√™nero {selected_genre}", lang_code)

# Generate recommendations
if st.button(translations["get_recommendations"][current_lang]):
    generate_recommendations(selected_genre, vectorizer, similarity, current_lang)

cleanup_audio()

st.markdown("---")
st.caption(translations["footer"][current_lang])








